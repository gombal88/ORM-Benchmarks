package pl.gombal.orm_benchmarks.io.greendao;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

import pl.gombal.orm_benchmarks.io.greendao.SingleTableDao;
import pl.gombal.orm_benchmarks.io.greendao.MultiTable10Dao;
import pl.gombal.orm_benchmarks.io.greendao.MultiTable09Dao;
import pl.gombal.orm_benchmarks.io.greendao.MultiTable08Dao;
import pl.gombal.orm_benchmarks.io.greendao.MultiTable07Dao;
import pl.gombal.orm_benchmarks.io.greendao.MultiTable06Dao;
import pl.gombal.orm_benchmarks.io.greendao.MultiTable05Dao;
import pl.gombal.orm_benchmarks.io.greendao.MultiTable04Dao;
import pl.gombal.orm_benchmarks.io.greendao.MultiTable03Dao;
import pl.gombal.orm_benchmarks.io.greendao.MultiTable02Dao;
import pl.gombal.orm_benchmarks.io.greendao.MultiTable01Dao;
import pl.gombal.orm_benchmarks.io.greendao.BigSingleTableDao;
import pl.gombal.orm_benchmarks.io.greendao.TableWithRelationToManyDao;
import pl.gombal.orm_benchmarks.io.greendao.TableWithRelationToOneDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 7): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 7;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        SingleTableDao.createTable(db, ifNotExists);
        MultiTable10Dao.createTable(db, ifNotExists);
        MultiTable09Dao.createTable(db, ifNotExists);
        MultiTable08Dao.createTable(db, ifNotExists);
        MultiTable07Dao.createTable(db, ifNotExists);
        MultiTable06Dao.createTable(db, ifNotExists);
        MultiTable05Dao.createTable(db, ifNotExists);
        MultiTable04Dao.createTable(db, ifNotExists);
        MultiTable03Dao.createTable(db, ifNotExists);
        MultiTable02Dao.createTable(db, ifNotExists);
        MultiTable01Dao.createTable(db, ifNotExists);
        BigSingleTableDao.createTable(db, ifNotExists);
        TableWithRelationToManyDao.createTable(db, ifNotExists);
        TableWithRelationToOneDao.createTable(db, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        SingleTableDao.dropTable(db, ifExists);
        MultiTable10Dao.dropTable(db, ifExists);
        MultiTable09Dao.dropTable(db, ifExists);
        MultiTable08Dao.dropTable(db, ifExists);
        MultiTable07Dao.dropTable(db, ifExists);
        MultiTable06Dao.dropTable(db, ifExists);
        MultiTable05Dao.dropTable(db, ifExists);
        MultiTable04Dao.dropTable(db, ifExists);
        MultiTable03Dao.dropTable(db, ifExists);
        MultiTable02Dao.dropTable(db, ifExists);
        MultiTable01Dao.dropTable(db, ifExists);
        BigSingleTableDao.dropTable(db, ifExists);
        TableWithRelationToManyDao.dropTable(db, ifExists);
        TableWithRelationToOneDao.dropTable(db, ifExists);
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(SingleTableDao.class);
        registerDaoClass(MultiTable10Dao.class);
        registerDaoClass(MultiTable09Dao.class);
        registerDaoClass(MultiTable08Dao.class);
        registerDaoClass(MultiTable07Dao.class);
        registerDaoClass(MultiTable06Dao.class);
        registerDaoClass(MultiTable05Dao.class);
        registerDaoClass(MultiTable04Dao.class);
        registerDaoClass(MultiTable03Dao.class);
        registerDaoClass(MultiTable02Dao.class);
        registerDaoClass(MultiTable01Dao.class);
        registerDaoClass(BigSingleTableDao.class);
        registerDaoClass(TableWithRelationToManyDao.class);
        registerDaoClass(TableWithRelationToOneDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}
